# kind: Pod
# apiVersion: v1
# metadata:
#   name: redis
# spec:
#   containers:
#     - name: redis
#       image: redislabs/rejson:latest
#       volumeMounts:
#       - mountPath: "/mnt/azure"
#         name: volume
#   volumes:
#     - name: volume
#       persistentVolumeClaim:
#         claimName: azure-managed-disk

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: managed-premium-retain
provisioner: disk.csi.azure.com
parameters:
  skuName: Premium_LRS
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: managed-premium-retain2
provisioner: disk.csi.azure.com
parameters:
  skuName: Premium_LRS
reclaimPolicy: Retain
volumeBindingMode: Immediate
allowVolumeExpansion: true
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium-retain
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-managed-disk2
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium-retain2
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: redis
spec:
  replicas: 10
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redislabs/rejson:latest
        volumeMounts:
        - mountPath: "/data"
          name: volume
        ports:
        - containerPort: 6379
      volumes:
      - name: volume
        persistentVolumeClaim:
          claimName: azure-managed-disk
---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
spec:
  type: LoadBalancer
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
